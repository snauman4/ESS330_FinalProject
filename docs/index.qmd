---
title: Differing Water Quality in Protected and Unprotected U.S. Southwest River Basins
authors:
  - name: Samantha Nauman, Madison Schartz, Hanna Velicer
    affiliation: Colorado State University
    roles: writing
    corresponding: true
bibliography: references.bib
execute: 
  echo: true
---
# Introduction

Water quality is currently one of the most pressing environmental challenges across the globe, directly impacting both ecosystem and human health, along with biodiversity. Looking specifically at Colorado, there are growing concerns over the state of local river systems due to increased runoff and nutrient pollution (ator2022effects). These concerns call for a better understanding of how protection policies could help mitigate threats to water quality. While some laws and frameworks are in place to control pollution and other harmful factors, these protections vary in their ability to truly protect aquatic ecosystems. Conducting research on river systems is crucial for aiding in conservation policy, especially with increasing urbanization, climate change, and ongoing pollution. 

River ecosystems serve as habitat for many organisms and also provide economic resources. Despite this, they continue to be threatened by anthropogenic activities like agriculture and industrial development. To combat these threats, protected area frameworks like the National Parks have been introduced to preserve these ecosystems from further harm. The study region for this project is the Southwestern United States where there are multiple protected and unprotected areas., with four of our ten sites being in Colorado specifically. The selected river systems to pull both protected and unprotected site data from are the Cache la Poudre River here in Fort Collins, the Colorado River in Mesa County, CO near the CO-UT state line, the Santa Margarita River  near Temecula, California, the Verde River below Bartlett Dam, AZ, and the Green River in Jensen, Utah. Many of these river systems flow through wilderness in addition to more developed, urban areas. Using two sites along the same river system will allow us to see water quality measurements taken over a 45-year span and see how the quality has changed over time in relatively similar conditions. This contrast will allow for a direct comparison to see how protection status affects water quality trends.

The topic of this project was driven by a growing appreciation for data-based policy and its increasing importance for environmental protection. By looking at rivers with both protected and unprotected areas, we hope to pinpoint the true effects that protective status has on water quality. Additionally, by analyzing more than four decades of data, 1975 to 2024, we will be able to spot long-term trends rather than random deviations. Our motivation for this topic initially originated from the local significance of the Cache la Poudre River. Being Colorado State University undergraduate students in the Warner College of Natural Resources, we recognize the ecological importance and impact that specific river system has on the surrounding areas. It is an essential water source for agriculture and also home to the local biodiversity, including both aquatic and riparian species. We then decided to expand our analysis to more river systems in the Southwestern United States to get more substanial results. Comparing different areas in the same river systems in this project provides the opportunity to see how protection status affects ecosystems against human and environmental impacts on a more local level. 

To conduct our analysis, we will use publicly available data from U.S. Geological Survey (USGS). We will be focusing on three variables for this project: discharge flow rate, water temperature, and pH. We believe that combined, these three will give us an accurate evaluation of each site’s water quality over time. In this project, we will be testing the hypothesis that areas designated as “protected,” due to endangered species, their location, etc., have stronger safeguards against various environmental stressors (ie pollution) than areas with no “protected” designation, leading to better water quality. We aim to test this hypothesis by looking at long-term trends in discharge, water temperature, and pH, as well as conducting various statistical tests to determine statistical significance of the variables at each protected and unprotected site. 

# Methods


# Results
## Reading and Cleaning Unprotected Sites
```{r}
library(tidyverse)
library(dataRetrieval)
library(ggplot2)
library(plotly)
library(lubridate)
library(ggpubr)
library(plotly)
library(dplyr)
library(tsibble)

  # CO unprotected 1
QCO_unpro1=readNWISdv(
  siteNumber= c('09034250'),
  parameterCd= c('00060'),
  startDate='1975-10-01', #beginning of wateryear 1976
  endDate='2024-10-01') %>%
  renameNWISColumns() %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(Flow = mean(Flow, na.rm = TRUE), .groups = "drop")

pHWT_COunpro1 <- read.csv(
  "https://raw.githubusercontent.com/snauman4/ESS330_FinalProject/main/CO_dataunprotected1.csv",
  stringsAsFactors = FALSE
)

# 2. Compute daily means of Temp and pH
DailypW_COunpro1 <- pHWT_COunpro1 %>%
  # parse your Date
  mutate(Date = mdy(Date)) %>%
  # drop the qualifier columns and coerce the true max/min to numeric
  mutate(across(
    c(Temp..max., Temp..min., pH..max., pH..min.),
    ~ as.numeric(.)
  )) %>%
  # compute a rowwise mean of temp and of pH
  mutate(
    Temp_mean = rowMeans(select(., Temp..max., Temp..min.), na.rm = TRUE),
    pH_mean   = rowMeans(select(., pH..max.,    pH..min.),    na.rm = TRUE)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(Temp_mean, na.rm = TRUE),
    `pH (mean)` = mean(pH_mean,   na.rm = TRUE),
    .groups = "drop"
  )

# 3. Roll those daily means up to monthly to line up with your flow data
Month_COunpro1 <- DailypW_COunpro1 %>%
  mutate(
    Date = yearmonth(Date)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(`Temp (C)`,  na.rm = TRUE),
    `pH (mean)` = mean(`pH (mean)`, na.rm = TRUE),
    .groups = "drop"
  )

# make sure site_no is character in both data sets
QCO_unpro1 <- QCO_unpro1 %>%
  mutate(
    site_no = as.character(site_no),        # ensure it’s a string
    Date    = yearmonth(Date)               # ensure it’s a yearmonth
  )

Month_COunpro1 <- Month_COunpro1 %>%
  mutate(
    site_no = str_pad(as.character(site_no), width = 8, pad = "0"),
       # pad out to 8 digits with leading zeros
    Date    = yearmonth(Date)
  )

# now the join will work
COdata_unprotected1 <- QCO_unpro1 %>%
  left_join(Month_COunpro1, by = c("site_no","Date")) %>%
  select(site_no, Date, Flow, `Temp (C)`, `pH (mean)`)

  # CO unprotected 2
QCO_unpro2=readNWISdv(
  siteNumber= c('09147500'),
  parameterCd= c('00060'),
  startDate='1975-10-01', #beginning of wateryear 1976
  endDate='2024-10-01') %>%
  renameNWISColumns() %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(Flow = mean(Flow, na.rm = TRUE), .groups = "drop")

pHWT_COunpro2 <- read.csv(
  "https://raw.githubusercontent.com/snauman4/ESS330_FinalProject/main/CO_dataunprotected2.csv",
  stringsAsFactors = FALSE
)

# 2. Compute daily means of Temp and pH
DailypW_COunpro2 <- pHWT_COunpro2 %>%
  # parse your Date
  mutate(Date = mdy(Date)) %>%
  # drop the qualifier columns and coerce the true max/min to numeric
  mutate(across(
    c(Temp..max., Temp..min.),
    ~ as.numeric(.)
  )) %>%
  # compute a rowwise mean of temp and of pH
  mutate(
    Temp_mean = rowMeans(select(., Temp..max., Temp..min.), na.rm = TRUE)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(Temp_mean, na.rm = TRUE),
    .groups = "drop"
  )

# 3. Roll those daily means up to monthly to line up with your flow data
Month_COunpro2 <- DailypW_COunpro2 %>%
  mutate(
    Date = yearmonth(Date)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(`Temp (C)`,  na.rm = TRUE),
    .groups = "drop"
  )

# make sure site_no is character in both data sets
QCO_unpro2 <- QCO_unpro2 %>%
  mutate(
    site_no = as.character(site_no),        # ensure it’s a string
    Date    = yearmonth(Date)               # ensure it’s a yearmonth
  )

Month_COunpro2 <- Month_COunpro2 %>%
  mutate(
    site_no = str_pad(as.character(site_no), width = 8, pad = "0"),
       # pad out to 8 digits with leading zeros
    Date    = yearmonth(Date)
  )

# now the join will work
COdata_unprotected2 <- QCO_unpro2 %>%
  left_join(Month_COunpro2, by = c("site_no","Date")) %>%
  select(site_no, Date, Flow, `Temp (C)`)

  # CA unprotected 
QCA_unpro=readNWISdv(
  siteNumber= c('11074000'),
  parameterCd= c('00060'),
  startDate='1975-10-01', #beginning of wateryear 1976
  endDate='2024-10-01') %>%
  renameNWISColumns() %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(Flow = mean(Flow, na.rm = TRUE), .groups = "drop")

pHWT_CAunpro <- read.csv(
  "https://raw.githubusercontent.com/snauman4/ESS330_FinalProject/main/CA_dataunprotected.csv",
  stringsAsFactors = FALSE
)

# 2. Compute daily means of Temp and pH
DailypW_CAunpro <- pHWT_CAunpro %>%
  # parse your Date
  mutate(Date = mdy(Date)) %>%
  # drop the qualifier columns and coerce the true max/min to numeric
  mutate(across(
    c(Temp..max., Temp..min.),
    ~ as.numeric(.)
  )) %>%
  # compute a rowwise mean of temp and of pH
  mutate(
    Temp_mean = rowMeans(select(., Temp..max., Temp..min.), na.rm = TRUE)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(Temp_mean, na.rm = TRUE),
    .groups = "drop"
  )

# 3. Roll those daily means up to monthly to line up with your flow data
Month_CAunpro <- DailypW_CAunpro %>%
  mutate(
    Date = yearmonth(Date)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(`Temp (C)`,  na.rm = TRUE),
    .groups = "drop"
  )

# make sure site_no is character in both data sets
QCA_unpro <- QCA_unpro %>%
  mutate(
    site_no = as.character(site_no),        # ensure it’s a string
    Date    = yearmonth(Date)               # ensure it’s a yearmonth
  )

Month_CAunpro <- Month_CAunpro %>%
  mutate(
    site_no = str_pad(as.character(site_no), width = 8, pad = "0"),
    Date    = yearmonth(Date))

CAdata_unprotected <- QCA_unpro %>%
  left_join(Month_CAunpro, by = c("site_no","Date")) %>%
  select(site_no, Date, Flow, `Temp (C)`)

  # AZ unprotected 
AZunproraw <- read.csv(
  "https://raw.githubusercontent.com/madi-schartz/ESS330-FINAL/refs/heads/master/AZdata_unprotected.csv",
  stringsAsFactors = FALSE
)

# add pH
DailypW_AZunpro <- AZunproraw %>%
  mutate(Date = mdy(Date)) %>% 
  mutate(across(
    c(Temp..mean.),
    ~ as.numeric(.)
  )) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Discharge..Mean., na.rm = TRUE),
    `Temp (C)` = mean(Temp..mean.,        na.rm = TRUE),
    .groups    = "drop"
  )

AZdata_unprotected <- DailypW_AZunpro %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Flow,       na.rm = TRUE),
    `Temp (C)` = mean(`Temp (C)`, na.rm = TRUE),
    .groups    = "drop"
  )

  # UT unprotected
UTunproraw <- read.csv(
  "https://raw.githubusercontent.com/madi-schartz/ESS330-FINAL/refs/heads/master/UTdata_unprotected.csv",
  stringsAsFactors = FALSE
)

DailypW_UTunpro <- UTunproraw %>%
  mutate(Date = mdy(Date)) %>% 
  mutate(across(
    c(Discharge,`Temp..Min.`,`Temp..Max.`, `pH..Max.`, `pH..Min.`),
    ~ as.numeric(.)
  )) %>%
  mutate(
    Temp_mean = rowMeans(select(., Temp..Max.,  Temp..Min.), na.rm = TRUE),
    pH_mean   = rowMeans(select(., pH..Max.,     pH..Min.),    na.rm = TRUE)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Discharge, na.rm = TRUE),
    `Temp (C)` = mean(Temp_mean,        na.rm = TRUE),
    `pH (mean)`= mean(pH_mean,          na.rm = TRUE),
    .groups    = "drop"
  )

# 3. roll up to monthly
UTdata_unprotected <- DailypW_UTunpro %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Flow,       na.rm = TRUE),
    `Temp (C)` = mean(`Temp (C)`, na.rm = TRUE),
    `pH (mean)`= mean(`pH (mean)`,na.rm = TRUE),
    .groups    = "drop"
  )
```


```{r}
head(COdata_unprotected1)
head(COdata_unprotected2)
head(CAdata_unprotected)
head(UTdata_unprotected)
```
## Reading and Cleaning Protected Sites
```{r}
  # CO protected 1
QCO_pro1=readNWISdv(
  siteNumber= c('06752260'),
  parameterCd= c('00060'),
  startDate='1975-10-01', #beginning of wateryear 1976
  endDate='2024-10-01') %>%
  renameNWISColumns() %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(Flow = mean(Flow, na.rm = TRUE), .groups = "drop")

pHWT_COpro1 <- read.csv(
  "https://raw.githubusercontent.com/snauman4/ESS330_FinalProject/main/CO_dataprotected1.csv",
  stringsAsFactors = FALSE
)

DailypW_COpro1 <- pHWT_COpro1 %>%
  mutate(Date = mdy(Date)) %>%
  mutate(across(
    c(Temp..max., Temp..min.),
    ~ as.numeric(.))) %>%
  mutate(
    Temp_mean = rowMeans(select(., Temp..max., Temp..min.), na.rm = TRUE),
    pH_mean = rowMeans(select(., pH..max., pH..min.), na.rm = TRUE)) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(Temp_mean, na.rm = TRUE),
    `pH (mean)` = mean(pH_mean, na.rm = TRUE),
    .groups = "drop")

Month_COpro1 <- DailypW_COpro1 %>%
  mutate(
    Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(`Temp (C)`,  na.rm = TRUE),
    `pH (mean)` = mean(`pH (mean)`, na.rm = TRUE),
    .groups = "drop")

QCO_pro1 <- QCO_pro1 %>%
  mutate(
    site_no = as.character(site_no),        
    Date    = yearmonth(Date))

Month_COpro1 <- Month_COpro1 %>%
  mutate(
    site_no = str_pad(as.character(site_no), width = 8, pad = "0"),
    Date    = yearmonth(Date))

COdata_protected1 <- QCO_pro1 %>%
  left_join(Month_COpro1, by = c("site_no","Date")) %>%
  select(site_no, Date, Flow, `Temp (C)`, `pH (mean)`)

  # CO protected 2
QCO_pro2=readNWISdv(
  siteNumber= c('09163500'),
  parameterCd= c('00060'),
  startDate='1975-10-01', #beginning of wateryear 1976
  endDate='2024-10-01') %>%
  renameNWISColumns() %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(Flow = mean(Flow, na.rm = TRUE), .groups = "drop")

pHWT_COpro2 <- read.csv(
  "https://raw.githubusercontent.com/snauman4/ESS330_FinalProject/main/CO_dataprotected2.csv",
  stringsAsFactors = FALSE
)

DailypW_COpro2 <- pHWT_COpro2 %>%
  mutate(Date = mdy(Date)) %>%
  mutate(across(
    c(Temp..max., Temp..min.),
    ~ as.numeric(.))) %>%
  mutate(
    Temp_mean = rowMeans(select(., Temp..max., Temp..min.), na.rm = TRUE),
    pH_mean = rowMeans(select(., pH..max., pH..min.), na.rm = TRUE)) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(Temp_mean, na.rm = TRUE),
    `pH (mean)` = mean(pH_mean, na.rm = TRUE),
    .groups = "drop")

Month_COpro2 <- DailypW_COpro2 %>%
  mutate(
    Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(`Temp (C)`,  na.rm = TRUE),
    `pH (mean)` = mean(`pH (mean)`, na.rm = TRUE),
    .groups = "drop")

QCO_pro2 <- QCO_pro2 %>%
  mutate(
    site_no = as.character(site_no),       
    Date    = yearmonth(Date))

Month_COpro2 <- Month_COpro2 %>%
  mutate(
    site_no = str_pad(as.character(site_no), width = 8, pad = "0"),
    Date    = yearmonth(Date))

COdata_protected2 <- QCO_pro2 %>%
  left_join(Month_COpro2, by = c("site_no","Date")) %>%
  select(site_no, Date, Flow, `Temp (C)`, `pH (mean)`)

  # CA protected
QCA_pro=readNWISdv(
  siteNumber= c('11044000'),
  parameterCd= c('00060'),
  startDate='1975-10-01', #beginning of wateryear 1976
  endDate='2024-10-01') %>%
  renameNWISColumns() %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(Flow = mean(Flow, na.rm = TRUE), .groups = "drop")

pHWT_CApro <- read.csv(
  "https://raw.githubusercontent.com/snauman4/ESS330_FinalProject/main/CA_dataprotected.csv",
  stringsAsFactors = FALSE
)

DailypW_CApro <- pHWT_CApro %>%
  mutate(Date = mdy(Date)) %>%
  mutate(across(
    c(Temp..max., Temp..min.,`pH..max.`, `pH..min.`),
    ~ as.numeric(.),
    .names = "{.col}")
  ) %>%
  mutate(
    Temp_mean = rowMeans(select(., Temp..max., Temp..min.), na.rm = TRUE),
    pH_mean   = rowMeans(select(., pH..max.,    pH..min.),    na.rm = TRUE)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(Temp_mean, na.rm = TRUE),
    `pH (mean)` = mean(pH_mean, na.rm = TRUE),
    .groups = "drop"
  )

Month_CApro <- DailypW_CApro %>%
  mutate(
    Date = yearmonth(Date)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    `Temp (C)`  = mean(`Temp (C)`,  na.rm = TRUE),
    `pH (mean)` = mean(`pH (mean)`, na.rm = TRUE),
    .groups = "drop"
  )

QCA_pro <- QCA_pro %>%
  mutate(
    site_no = as.character(site_no),       
    Date    = yearmonth(Date)               
  )

Month_CApro <- Month_CApro %>%
  mutate(
    site_no = str_pad(as.character(site_no), width = 8, pad = "0"),
    Date    = yearmonth(Date)
  )

CAdata_protected <- QCA_pro %>%
  left_join(Month_CApro, by = c("site_no","Date")) %>%
  select(site_no, Date, Flow, `Temp (C)`, `pH (mean)`)

  # AZ data 
AZraw <- read.csv(
  "https://raw.githubusercontent.com/hvelicer/ESS330_finalproject/refs/heads/main/AZdata_protected.csv",
  stringsAsFactors = FALSE
)

DailypW_AZpro <- AZraw %>%
  mutate(Date = mdy(Date)) %>% 
  mutate(across(
    c(Temp..max., Temp..min., `pH..max.`, `pH..min.`),
    ~ as.numeric(.)
  )) %>%
  mutate(
    Temp_mean = rowMeans(select(., Temp..max.,  Temp..min.), na.rm = TRUE),
    pH_mean   = rowMeans(select(., pH..max.,     pH..min.),    na.rm = TRUE)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Discharge..mean., na.rm = TRUE),
    `Temp (C)` = mean(Temp..mean.,        na.rm = TRUE),
    `pH (mean)`= mean(pH_mean,          na.rm = TRUE),
    .groups    = "drop"
  )

AZdata_protected <- DailypW_AZpro %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Flow,       na.rm = TRUE),
    `Temp (C)` = mean(`Temp (C)`, na.rm = TRUE),
    `pH (mean)`= mean(`pH (mean)`,na.rm = TRUE),
    .groups    = "drop"
  )

  # UT data
UTraw <- read.csv(
  "https://raw.githubusercontent.com/hvelicer/ESS330_finalproject/main/UTdata_protected.csv",
  stringsAsFactors = FALSE
)

DailypW_UTpro <- UTraw %>%
  mutate(Date = mdy(Date)) %>% 
  mutate(across(
    c(Temp..max., Temp..min., `pH..max.`, `pH..min.`),
    ~ as.numeric(.)
  )) %>%
  mutate(
    Temp_mean = rowMeans(select(., Temp..max.,  Temp..min.), na.rm = TRUE),
    pH_mean   = rowMeans(select(., pH..max.,     pH..min.),    na.rm = TRUE)
  ) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Discharge..mean., na.rm = TRUE),
    `Temp (C)` = mean(Temp_mean,        na.rm = TRUE),
    `pH (mean)`= mean(pH_mean,          na.rm = TRUE),
    .groups    = "drop"
  )

UTdata_protected <- DailypW_UTpro %>%
  mutate(Date = yearmonth(Date)) %>%
  group_by(site_no, Date) %>%
  summarise(
    Flow       = mean(Flow,       na.rm = TRUE),
    `Temp (C)` = mean(`Temp (C)`, na.rm = TRUE),
    `pH (mean)`= mean(`pH (mean)`,na.rm = TRUE),
    .groups    = "drop"
  )
```

```{r}
head(COdata_protected1)
head(COdata_protected2)
head(CAdata_protected)
head(AZdata_protected)
head(UTdata_protected)
```

## Yearly Flow, Water Temperature (C), and pH (mean)
```{r}
# 1) bind & tag
unprotected_all <- bind_rows(
  COdata_unprotected1 %>% mutate(site_no = as.character(site_no)),
  COdata_unprotected2 %>% mutate(site_no = as.character(site_no)),
  CAdata_unprotected   %>% mutate(site_no = as.character(site_no)),
  AZdata_unprotected   %>% mutate(site_no = as.character(site_no)),
  UTdata_unprotected   %>% mutate(site_no = as.character(site_no))
) %>%
  mutate(protection = "Unprotected")

protected_all <- bind_rows(
  COdata_protected1 %>% mutate(site_no = as.character(site_no)),
  COdata_protected2 %>% mutate(site_no = as.character(site_no)),
  CAdata_protected  %>% mutate(site_no = as.character(site_no)),
  AZdata_protected  %>% mutate(site_no = as.character(site_no)),
  UTdata_protected  %>% mutate(site_no = as.character(site_no))
) %>%
  mutate(protection = "Protected")

# 2) factorize **after** sub‐setting (so you only get the levels you actually have)
unprotected_all <- unprotected_all %>% mutate(site_no = factor(site_no))
protected_all   <- protected_all   %>% mutate(site_no = factor(site_no))

# 3) helper
make_panel <- function(df, yvar, title) {
  ggplot(df, aes(x = Date, y = .data[[yvar]], colour = site_no)) +
    geom_line(size = 0.3,   na.rm = TRUE) +
    geom_point(size = 0.8,  na.rm = TRUE) +
    labs(title = title, x = NULL, y = NULL, colour = "Site") +
    theme_minimal()
}

# 4) build
p_flow_un <- make_panel(unprotected_all, "Flow",      "Unprotected Flow")
ggplotly(p_flow_un)
p_temp_un <- make_panel(unprotected_all, "Temp (C)",  "Unprotected Temp (C)")
ggplotly(p_temp_un)
p_ph_un   <- make_panel(unprotected_all, "pH (mean)", "Unprotected pH (mean)")
ggplotly(p_ph_un)

p_flow_pr <- make_panel(protected_all,   "Flow",      "Protected Flow")
ggplotly(p_flow_pr)
p_temp_pr <- make_panel(protected_all,   "Temp (C)",  "Protected Temp (C)")
ggplotly(p_temp_pr)
p_ph_pr   <- make_panel(protected_all,   "pH (mean)", "Protected pH (mean)")
ggplotly(p_ph_pr)

# 5) stack
Yearly_un <- ggarrange(
  p_flow_un, p_temp_un, p_ph_un,
  ncol = 1, nrow = 3,
  common.legend = TRUE, legend = "bottom"
)

Yearly_pr <- ggarrange(
  p_flow_pr, p_temp_pr, p_ph_pr,
  ncol = 1, nrow = 3,
  common.legend = TRUE, legend = "bottom"
)

Yearly_both <- ggarrange(
  Yearly_un, Yearly_pr,
  ncol   = 2, widths = c(1,1),
  label.x = c(0.05, 0.55),
  label.y = 1.02
)

print(Yearly_both)
```
We first visualized monthly flow, temperature, and pH trends separately for unprotected and protected sites over the years of 1975-10-01 (water year 1976) to 2024-10-01 (beginning of water year 2025). In the unprotected basins, flow exhibits large spikes, mainly at USGS site 9315000, during spring and early summer months, whereas the other four unprotected sites remain relatively low and stable throughout the record. Protected sites show a similar seasonal pulse in flow (notably at 09163500 and 9261000) but with generally lower peak magnitudes compared to the highest‐flow unprotected basin. Temperature time‐series at both unprotected and protected sites display pronounced annual cycles, with summer highs around 20–25 °C and winter lows near 0–5 °C. However, the timing and amplitude of those cycles vary by site based on elevation and location. The pH plots reveal tight clustering around neutral to slightly alkaline values (7.5–8.5 pH) across all sites, with only minor month‐to‐month fluctuations and no obvious long‐term drift.
## Seasonal Flows
```{r}
# Looking at seasonal data
library(tsibble)
library(feasts)
library(plotly)

# turn your data into a tsibble
ts_unprotected <- unprotected_all %>%
  as_tsibble(key = site_no, index = Date)
ts_protected <- protected_all %>% 
  as_tsibble(key = site_no, index = Date)

# 1) Unprotected
p_sub_flow_un <- ts_unprotected %>% 
  gg_subseries(Flow) +
  labs(title="Unprotected Flow Subseries")

# 2) Protected 
p_sub_flow_pr <- ts_protected %>% 
  gg_subseries(Flow) +
  labs(title="Protected Flow Subseries")

ggplotly(p_sub_flow_un)
ggplotly(p_sub_flow_pr)
```
Seasonal subseries plots break down each site’s flow into monthly panels. Seasonal flow subseries for protected sites reveal a clear pulse each June, with median monthly flows peaking higher than in other months and relatively tight variability across years. On the other hand, winter months (December–February) consistently exhibit near‐zero median flows and minimal spread. In contrast, unprotected basins also peak in June but display much broader variability, particularly in April–July, while their winter panels remain clustered near zero, highlighting more pronounced seasonal swings in flow at unprotected locations.

## Statistical Tests
```{r}
# 1) combine into one df
combined <- bind_rows(
  unprotected_all,
  protected_all
) %>% 
  mutate(
    protection = factor(protection, levels = c("Unprotected","Protected")),
    site_no    = factor(site_no)
  )

# 2) ANOVA by protection
anova_flow <- aov(Flow       ~ protection, data = combined)
anova_temp <- aov(`Temp (C)` ~ protection, data = combined)
anova_ph   <- aov(`pH (mean)`~ protection, data = combined)

summary(anova_flow)
summary(anova_temp)
summary(anova_ph)

# 3) two‐sample t‐tests by protection
t.test(Flow       ~ protection, data = combined)
t.test(`Temp (C)` ~ protection, data = combined)
t.test(`pH (mean)`~ protection, data = combined)

# 4) if variances aren’t equal, switch to Welch’s ANOVA
oneway.test(Flow ~ site_no, data = unprotected_all, var.equal = FALSE)
oneway.test(Flow ~ site_no, data = protected_all,   var.equal = FALSE)

# 5) post‐hoc pairwise comparisons
anova_un_flow <- aov(Flow       ~ site_no, data = unprotected_all)
TukeyHSD(anova_un_flow)

anova_pr_flow <- aov(Flow       ~ site_no, data = protected_all)
TukeyHSD(anova_pr_flow)
```
Across our full monthly dataset with the combined protected and unprotected sites, one‐way ANOVAs showed significant differences between Protected vs. Unprotected sites for Flow (p < 2e-16), Temp (p = 4.32e-15), and pH (p = 1.1e-15). Welch two‐sample t‐tests confirmed that mean monthly Flow was higher at Protected sites (protected = 2177.551 vs. unprotected 1254.596 cfs, p < 2e-16), while Unprotected sites were warmer (unprotected = 15.46 vs. protected = 13.09 °C, p = 2.749e-15) and more alkaline/higher pH (unprotected = 8.33 vs. protected = 8.01, p = 1.364e-12). Within each protection class, one‐way ANOVAs of Flow by site_no were also highly significant (Unprotected: p < 2.2e-15; Protected: p < 2.2e-16). In addition, the post‐hoc Tukey HSD table shows which specific pairs have a statistically significant difference in mean flow (adjusted p-value < 0.05).

# Discussion
